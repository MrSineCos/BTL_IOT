import paho.mqtt.client as mqtt
import requests
from typing import Optional, Dict, Any

# === C·∫•u h√¨nh ThingsBoard Cloud ===
THINGSBOARD_HOST = "app.coreiot.io"
THINGSBOARD_PORT = 1883
ACCESS_TOKEN = "mze9614291gw4wsthfrz"  # Thay b·∫±ng access token c·ªßa thi·∫øt b·ªã tr√™n ThingsBoard
JWT_TOKEN = "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtaW5oLnBoYW0yMjEyMDc1QGhjbXV0LmVkdS52biIsInVzZXJJZCI6IjY0ZWNiYzcwLWVkOGUtMTFlZi04N2I1LTIxYmNjZjdkMjlkNSIsInNjb3BlcyI6WyJURU5BTlRfQURNSU4iXSwic2Vzc2lvbklkIjoiMDQ3MzUyMTMtMDU5NC00M2JlLTk0ZGUtYTlhYzMwODJkYmZhIiwiZXhwIjoxNzQ5MDMzNzM5LCJpc3MiOiJjb3JlaW90LmlvIiwiaWF0IjoxNzQ5MDI0NzM5LCJmaXJzdE5hbWUiOiJNSU5IIiwibGFzdE5hbWUiOiJQSOG6oE0gUVVBTkciLCJlbmFibGVkIjp0cnVlLCJpc1B1YmxpYyI6ZmFsc2UsInRlbmFudElkIjoiNjRlMzZkYTAtZWQ4ZS0xMWVmLTg3YjUtMjFiY2NmN2QyOWQ1IiwiY3VzdG9tZXJJZCI6IjEzODE0MDAwLTFkZDItMTFiMi04MDgwLTgwODA4MDgwODA4MCJ9.aTTCJSXB_aUf8PiWS2TkvWwrGZXOcunWgFWM3Z2gvpt_JbSHr45Ot4auNuJOgQMupg7Ko7QhnXabVLXESUnOxQ"
DEVICE_ID = "eb308820-ed8e-11ef-87b5-21bccf7d29d5"  # Thay b·∫±ng deviceId c·ªßa thi·∫øt b·ªã tr√™n ThingsBoard
# === MQTT client setup ===
client = mqtt.Client()
client.username_pw_set(ACCESS_TOKEN)

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("ƒê√£ k·∫øt n·ªëi t·ªõi ThingsBoard Cloud MQTT Broker")
    else:
        print(f"K·∫øt n·ªëi l·ªói, m√£ tr·∫£ v·ªÅ: {rc}")

client.on_connect = on_connect

client.connect(THINGSBOARD_HOST, THINGSBOARD_PORT)
client.loop_start()

def publish_telemetry(payload: dict):
    """
    G·ª≠i d·ªØ li·ªáu telemetry l√™n ThingsBoard.
    payload: dict, v√≠ d·ª• {"temperature": 25}
    """
    import json
    topic = "v1/devices/me/telemetry"
    result = client.publish(topic, json.dumps(payload))
    if result.rc != mqtt.MQTT_ERR_SUCCESS:
        print('L·ªói g·ª≠i MQTT:', mqtt.error_string(result.rc))
    else:
        print(f'ƒê√£ g·ª≠i telemetry: {payload}')

def publish_attribute(payload: dict):
    """
    G·ª≠i thu·ªôc t√≠nh (attributes) l√™n ThingsBoard.
    """
    import json
    topic = "v1/devices/me/attributes"
    result = client.publish(topic, json.dumps(payload))
    if result.rc != mqtt.MQTT_ERR_SUCCESS:
        print('L·ªói g·ª≠i MQTT:', mqtt.error_string(result.rc))
    else:
        print(f'ƒê√£ g·ª≠i attribute: {payload}')

def request_attribute(type: str, key: str):
    """
    G·ª≠i y√™u c·∫ßu l·∫•y thu·ªôc t√≠nh c√≥ t√™n key v√† lo·∫°i l√† type (client, shared) t·ª´ ThingsBoard.
    """
    url = f"https://{THINGSBOARD_HOST}/api/v1/{ACCESS_TOKEN}/attributes"
    params = {}
    if type == "client":
        params["clientKeys"] = key
    elif type == "shared":
        params["sharedKeys"] = key
    else:
        print("Lo·∫°i attribute kh√¥ng h·ª£p l·ªá. Ch·ªâ h·ªó tr·ª£ 'client' ho·∫∑c 'shared'.")
        return None
    try:
        resp = requests.get(url, params=params, timeout=5)
        resp.raise_for_status()
        data = resp.json()
        # Tr·∫£ v·ªÅ gi√° tr·ªã attribute n·∫øu c√≥
        if type == "client" and "client" in data and key in data["client"]:
            return data["client"][key]
        elif type == "shared" and "shared" in data and key in data["shared"]:
            return data["shared"][key]
        else:
            print(f"Kh√¥ng t√¨m th·∫•y attribute '{key}' lo·∫°i '{type}'")
            return None
    except Exception as e:
        print(f"L·ªói l·∫•y attribute '{key}' lo·∫°i '{type}': {e}")
        return None

def get_latest_telemetry(key: str, jwt_token: str, device_id: str):
    """
    L·∫•y gi√° tr·ªã telemetry m·ªõi nh·∫•t qua REST API (c·∫ßn JWT token v√† deviceId).
    """
    url = f"https://{THINGSBOARD_HOST}/api/plugins/telemetry/DEVICE/{device_id}/values/timeseries?keys={key}"
    headers = {
        "X-Authorization": f"{jwt_token}"
    }
    try:
        resp = requests.get(url, headers=headers, timeout=5)
        resp.raise_for_status()
        data = resp.json()
        # D·ªØ li·ªáu tr·∫£ v·ªÅ d·∫°ng: {"temperature": [{"ts":..., "value":...}], ...}
        if key in data and isinstance(data[key], list) and data[key]:
            return data[key][0].get("value")
        else:
            print(f"Kh√¥ng t√¨m th·∫•y telemetry '{key}'")
            return None
    except Exception as e:
        print(f"L·ªói l·∫•y d·ªØ li·ªáu telemetry '{key}': {e}")
        return None

def get_temperature():
    """
    L·∫•y gi√° tr·ªã temperature telemetry m·ªõi nh·∫•t.
    """
    return get_latest_telemetry("temperature", JWT_TOKEN, DEVICE_ID)

def get_humidity():
    """
    L·∫•y gi√° tr·ªã humidity telemetry m·ªõi nh·∫•t.
    """
    return get_latest_telemetry("humidity", JWT_TOKEN, DEVICE_ID)

def get_dust():
    """
    L·∫•y gi√° tr·ªã dust telemetry m·ªõi nh·∫•t.
    """
    return get_latest_telemetry("dust", JWT_TOKEN, DEVICE_ID)

def get_gas():
    """
    L·∫•y gi√° tr·ªã mq2 telemetry m·ªõi nh·∫•t.
    """
    return get_latest_telemetry("mq2", JWT_TOKEN, DEVICE_ID)

def get_question():
    """
    L·∫•y gi√° tr·ªã question attribute m·ªõi nh·∫•t.
    """
    return get_latest_telemetry("Question", JWT_TOKEN, DEVICE_ID)

def get_response():
    """
    L·∫•y gi√° tr·ªã AI telemetry m·ªõi nh·∫•t.Add commentMore actions
    """
    return get_latest_telemetry("AI", JWT_TOKEN, DEVICE_ID)

def get_air() -> Optional[str]:
    """
    L·∫•y gi√° tr·ªã chung c·ªßa kh√¥ng kh√≠ bao g·ªìm nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, l∆∞·ª£ng b·ª•i v√† kh√≠ gas.
    :return: Chu·ªói string ch·ª©a t·∫•t c·∫£ th√¥ng tin kh√¥ng kh√≠ ho·∫∑c None n·∫øu l·ªói
    """
    try:
        # L·∫•y t·∫•t c·∫£ gi√° tr·ªã c·∫£m bi·∫øn
        temperature = get_temperature()
        humidity = get_humidity()
        dust = get_dust()
        gas = get_gas()
        
        # T·∫°o danh s√°ch c√°c gi√° tr·ªã c√≥ s·∫µn
        air_data = []
        
        if temperature is not None:
            air_data.append(f"Temperature: {temperature}¬∞C")
        else:
            air_data.append("temperature: N/A")
            
        if humidity is not None:
            air_data.append(f"Humidity: {humidity}%")
        else:
            air_data.append("Humidity: N/A")
            
        if dust is not None:
            air_data.append(f"Dust: {dust}")
        else:
            air_data.append("Dust: N/A")
            
        if gas is not None:
            air_data.append(f"Gas: {gas}")
        else:
            air_data.append("Gas: N/A")
        
        # G·ªôp t·∫•t c·∫£ th√†nh m·ªôt chu·ªói
        air_summary = " | ".join(air_data)
        
        print(f"üìä Air information: {air_summary}")
        return air_summary
        
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y th√¥ng tin kh√¥ng kh√≠: {e}")
        return None

# N·∫øu ch·∫°y tr·ª±c ti·∫øp
if __name__ == "__main__":
    import time
    publish_telemetry({"temperature": 30})
    publish_telemetry({"humidity": 60})
    print("Gi√° tr·ªã nhi·ªát ƒë·ªô m·ªõi nh·∫•t:", get_temperature())
    print("Gi√° tr·ªã ƒë·ªô ·∫©m m·ªõi nh·∫•t:", get_humidity())
    time.sleep(1)
    client.loop_stop()
    client.disconnect()
