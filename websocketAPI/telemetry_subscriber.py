# websocketAPI/telemetry_subscriber.py

import json
import threading
import time
import requests
from websocket import WebSocketApp

# ----- C·∫§U H√åNH ThingsBoard -----
TB_HOST = 'app.coreiot.io'
TB_REST_PORT = 80
TB_WS_PORT = 80

TENANT_USER = 'sinecoswifi@gmail.com'    # Your email
TENANT_PASS = '123sc123'    # Your password
DEVICE_ID = 'b25a5f30-2a51-11f0-a3c9-ab0d8999f561'


class TelemetrySubscriber:
    def __init__(self, host = TB_HOST, rest_port = TB_REST_PORT, ws_port = TB_WS_PORT, username = TENANT_USER, password = TENANT_PASS, device_id = DEVICE_ID):
        """
        Kh·ªüi t·∫°o TelemetrySubscriber ƒë·ªÉ k·∫øt n·ªëi v·ªõi ThingsBoard
        
        Args:
            host (str): ƒê·ªãa ch·ªâ ThingsBoard server
            rest_port (int): Port cho REST API
            ws_port (int): Port cho WebSocket
            username (str): Email ƒëƒÉng nh·∫≠p ThingsBoard
            password (str): M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p ThingsBoard
            device_id (str): ID c·ªßa device tr√™n ThingsBoard
        """
        self.host = host
        self.rest_port = rest_port
        self.ws_port = ws_port
        self.username = username
        self.password = password
        self.device_id = device_id
        self.token = None
        self.ws_app = None
        self.telemetry_data = {}  # L∆∞u tr·ªØ d·ªØ li·ªáu telemetry m·ªõi nh·∫•t
        self.connected = False
        self.device_token = None  # Token cho device ƒë·ªÉ push telemetry

    def get_jwt_token(self):
        """
        L·∫•y JWT token ƒë·ªÉ authenticate v·ªõi ThingsBoard API
        
        Returns:
            str: JWT token ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c API calls
            
        Raises:
            RuntimeError: Khi kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c token t·ª´ ThingsBoard
        """
        login_url = f"http://{self.host}:{self.rest_port}/api/auth/login"
        payload = {
            "username": self.username,
            "password": self.password
        }
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        resp = requests.post(login_url, json=payload, headers=headers, timeout=10)
        resp.raise_for_status()
        data = resp.json()

        token = data.get('token')
        if not token:
            raise RuntimeError("Kh√¥ng l·∫•y ƒë∆∞·ª£c token t·ª´ ThingsBoard.")
        self.token = token
        return token

    def get_device_token(self):
        """
        L·∫•y device access token ƒë·ªÉ push telemetry data l√™n ThingsBoard
        
        Returns:
            str: Device access token ƒë·ªÉ push telemetry
            None: N·∫øu kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c token
            
        Note:
            C·∫ßn JWT token tr∆∞·ªõc khi g·ªçi method n√†y
        """
        if not self.token:
            self.get_jwt_token()
            
        device_url = f"http://{self.host}:{self.rest_port}/api/device/{self.device_id}/credentials"
        headers = {
            "X-Authorization": f"Bearer {self.token}",
            "Accept": "application/json"
        }

        try:
            resp = requests.get(device_url, headers=headers, timeout=10)
            resp.raise_for_status()
            data = resp.json()
            
            device_token = data.get('credentialsId')
            if not device_token:
                raise RuntimeError("Kh√¥ng l·∫•y ƒë∆∞·ª£c device token t·ª´ ThingsBoard.")
            self.device_token = device_token
            return device_token
        except Exception as e:
            print(f"‚ùó L·ªói khi l·∫•y device token: {e}")
            return None

    def isConnect(self) ->bool:
        """
        Checks if the connection to the telemetry service is currently established.

        Returns:
            bool: True if connected, False otherwise.
        """
        return self.connected

    def push_telemetry(self, telemetry_data: dict):
        """
        Push telemetry data l√™n ThingsBoard qua REST API
        
        Args:
            telemetry_data (dict): Dictionary ch·ª©a d·ªØ li·ªáu telemetry
                                 V√≠ d·ª•: {"temperature": 25.5, "humidity": 60}
        
        Returns:
            bool: True n·∫øu push th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
            
        Example:
            >>> subscriber.push_telemetry({"temperature": 25.5, "humidity": 60})
            True
        """
        if not self.device_token:
            if not self.get_device_token():
                print("‚ùó Kh√¥ng th·ªÉ l·∫•y device token ƒë·ªÉ push telemetry")
                return False

        telemetry_url = f"http://{self.host}:{self.rest_port}/api/v1/{self.device_token}/telemetry"
        headers = {
            "Content-Type": "application/json"
        }

        try:
            resp = requests.post(telemetry_url, json=telemetry_data, headers=headers, timeout=10)
            resp.raise_for_status()
            print(f"‚úÖ Push telemetry th√†nh c√¥ng: {telemetry_data}")
            return True
        except Exception as e:
            print(f"‚ùó L·ªói khi push telemetry: {e}")
            return False

    def push_telemetry_with_timestamp(self, telemetry_data: dict, timestamp: int = None):
        """
        Push telemetry data v·ªõi timestamp c·ª• th·ªÉ l√™n ThingsBoard
        
        Args:
            telemetry_data (dict): Dictionary ch·ª©a d·ªØ li·ªáu telemetry
                                 V√≠ d·ª•: {"temperature": 25.5, "humidity": 60}
            timestamp (int, optional): Unix timestamp t√≠nh b·∫±ng milliseconds
                                     N·∫øu None s·∫Ω s·ª≠ d·ª•ng th·ªùi gian hi·ªán t·∫°i
        
        Returns:
            bool: True n·∫øu push th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
            
        Example:
            >>> timestamp = int(time.time() * 1000)
            >>> subscriber.push_telemetry_with_timestamp({"temp": 25.5}, timestamp)
            True
        """
        if not self.device_token:
            if not self.get_device_token():
                print("‚ùó Kh√¥ng th·ªÉ l·∫•y device token ƒë·ªÉ push telemetry")
                return False

        if timestamp is None:
            timestamp = int(time.time() * 1000)

        # Format d·ªØ li·ªáu v·ªõi timestamp
        formatted_data = {
            "ts": timestamp,
            "values": telemetry_data
        }

        telemetry_url = f"http://{self.host}:{self.rest_port}/api/v1/{self.device_token}/telemetry"
        headers = {
            "Content-Type": "application/json"
        }

        try:
            resp = requests.post(telemetry_url, json=formatted_data, headers=headers, timeout=10)
            resp.raise_for_status()
            print(f"‚úÖ Push telemetry v·ªõi timestamp th√†nh c√¥ng: {formatted_data}")
            return True
        except Exception as e:
            print(f"‚ùó L·ªói khi push telemetry v·ªõi timestamp: {e}")
            return False

    def push_multiple_telemetry(self, telemetry_list: list):
        """
        Push nhi·ªÅu b·∫£n ghi telemetry c√πng l√∫c l√™n ThingsBoard
        
        Args:
            telemetry_list (list): Danh s√°ch c√°c dictionary telemetry v·ªõi timestamp
                                 V√≠ d·ª•: [
                                     {"ts": 1234567890000, "values": {"temp": 25}},
                                     {"ts": 1234567891000, "values": {"temp": 26}}
                                 ]
        
        Returns:
            bool: True n·∫øu push th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
            
        Example:
            >>> data_list = [
            ...     {"ts": 1234567890000, "values": {"temperature": 25}},
            ...     {"ts": 1234567891000, "values": {"temperature": 26}}
            ... ]
            >>> subscriber.push_multiple_telemetry(data_list)
            True
        """
        if not self.device_token:
            if not self.get_device_token():
                print("‚ùó Kh√¥ng th·ªÉ l·∫•y device token ƒë·ªÉ push telemetry")
                return False

        telemetry_url = f"http://{self.host}:{self.rest_port}/api/v1/{self.device_token}/telemetry"
        headers = {
            "Content-Type": "application/json"
        }

        try:
            resp = requests.post(telemetry_url, json=telemetry_list, headers=headers, timeout=10)
            resp.raise_for_status()
            print(f"‚úÖ Push multiple telemetry th√†nh c√¥ng: {len(telemetry_list)} records")
            return True
        except Exception as e:
            print(f"‚ùó L·ªói khi push multiple telemetry: {e}")
            return False

    def on_message(self, ws, message):
        """
        X·ª≠ l√Ω message nh·∫≠n ƒë∆∞·ª£c t·ª´ WebSocket ThingsBoard
        
        Args:
            ws: WebSocket instance
            message (str): Message JSON nh·∫≠n ƒë∆∞·ª£c t·ª´ ThingsBoard
            
        Note:
            Method n√†y ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông khi c√≥ d·ªØ li·ªáu telemetry m·ªõi
        """
        try:
            payload = json.loads(message)
        except json.JSONDecodeError:
            print("‚ùó Kh√¥ng parse ƒë∆∞·ª£c message JSON:", message)
            return

        if 'subscriptionId' in payload and 'data' in payload:
            data = payload['data']
            for key, values in data.items():
                if isinstance(values, list) and len(values) > 0:
                    _, value = values[0]
                    self.telemetry_data[key] = value  # L∆∞u gi√° tr·ªã m·ªõi nh·∫•t
            self.connected = True
        elif 'subscriptionId' in payload and payload.get('errorCode') == 0:
            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi telemetry subscription ID: {payload['subscriptionId']}")
            self.connected = True
        else:
            print("‚ÑπÔ∏è Message kh√°c:", payload)

    def on_error(self, ws, error):
        """
        X·ª≠ l√Ω l·ªói WebSocket
        
        Args:
            ws: WebSocket instance
            error: L·ªói x·∫£y ra
        """
        print("üö® WebSocket error:", error)

    def on_close(self, ws, code, reason):
        """
        X·ª≠ l√Ω khi WebSocket ƒë√≥ng k·∫øt n·ªëi
        
        Args:
            ws: WebSocket instance
            code (int): M√£ l·ªói ƒë√≥ng k·∫øt n·ªëi
            reason (str): L√Ω do ƒë√≥ng k·∫øt n·ªëi
        """
        print(f"üîí WebSocket ƒë√≥ng (code={code}, reason={reason})")
        self.connected = False

    def on_open(self, ws):
        """
        X·ª≠ l√Ω khi WebSocket m·ªü k·∫øt n·ªëi th√†nh c√¥ng
        
        Args:
            ws: WebSocket instance
            
        Note:
            T·ª± ƒë·ªông subscribe telemetry data khi k·∫øt n·ªëi th√†nh c√¥ng
        """
        print("üîå WebSocket k·∫øt n·ªëi th√†nh c√¥ng.")
        subscribe_payload = {
            "tsSubCmds": [
                {
                    "entityType": "DEVICE",
                    "entityId": self.device_id,
                    "scope": "LATEST_TELEMETRY",
                    "cmdId": 1
                }
            ]
        }
        ws.send(json.dumps(subscribe_payload))

    def start(self):
        """
        Kh·ªüi ƒë·ªông k·∫øt n·ªëi WebSocket ƒë·ªÉ subscribe telemetry data
        
        Note:
            - T·ª± ƒë·ªông l·∫•y JWT token v√† device token
            - Ch·∫°y WebSocket trong background thread
            - Method n√†y kh√¥ng block main thread
        """
        if not self.token:
            self.get_jwt_token()

        # L·∫•y device token ƒë·ªÉ c√≥ th·ªÉ push telemetry
        if not self.device_token:
            self.get_device_token()

        ws_url = f"ws://{self.host}:{self.ws_port}/api/ws/plugins/telemetry?token={self.token}"

        self.ws_app = WebSocketApp(
            ws_url,
            on_open=self.on_open,
            on_message=self.on_message,
            on_error=self.on_error,
            on_close=self.on_close
        )

        thread = threading.Thread(target=self.ws_app.run_forever, kwargs={'ping_interval': 20, 'ping_timeout': 10})
        thread.daemon = True
        thread.start()

    def get_telemetry_value(self, key: str):
        """
        L·∫•y gi√° tr·ªã telemetry m·ªõi nh·∫•t theo key
        
        Args:
            key (str): T√™n c·ªßa telemetry key c·∫ßn l·∫•y
                      V√≠ d·ª•: "temperature", "humidity", "mq2", "dust"
        
        Returns:
            any: Gi√° tr·ªã telemetry t∆∞∆°ng ·ª©ng v·ªõi key
            None: N·∫øu kh√¥ng t√¨m th·∫•y key ho·∫∑c ch∆∞a c√≥ d·ªØ li·ªáu
            
        Example:
            >>> temp = subscriber.get_telemetry_value("temperature")
            >>> print(f"Temperature: {temp}¬∞C")
        """
        return self.telemetry_data.get(key)

    def get_all_telemetry(self):
        """
        L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu telemetry hi·ªán c√≥
        
        Returns:
            dict: Dictionary ch·ª©a t·∫•t c·∫£ telemetry data
                  V√≠ d·ª•: {"temperature": 25.5, "humidity": 60, "mq2": 10}
                  
        Example:
            >>> all_data = subscriber.get_all_telemetry()
            >>> for key, value in all_data.items():
            ...     print(f"{key}: {value}")
        """
        return dict(self.telemetry_data)


# N·∫øu file n√†y ƒë∆∞·ª£c ch·∫°y tr·ª±c ti·∫øp, test nhanh k·∫øt n·ªëi v√† push telemetry
if __name__ == "__main__":
    subscriber = TelemetrySubscriber(
        TB_HOST, TB_REST_PORT, TB_WS_PORT,
        TENANT_USER, TENANT_PASS, DEVICE_ID
    )
    subscriber.start()
    print("‚è≥ ƒêang l·∫Øng nghe d·ªØ li·ªáu telemetry... Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
    
    # Test push telemetry sau 5 gi√¢y
    time.sleep(5)
    
    # Test push telemetry ƒë∆°n gi·∫£n
    test_data = {
        "temperature": 25.5,
        "humidity": 60.0,
    }